{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Bayesian Inference - What, When, why, how?\"\n",
        "image: thumbnail.png\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "author: \"Felipe Angelim\"\n",
        "date: \"2025-05-27\"\n",
        "categories: [machine learning, bayesian inference]\n",
        "jupyter: python3\n",
        "---"
      ],
      "id": "a16523bd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | echo: false\n",
        "import warnings\n",
        "\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "id": "ed528c4b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Bayesian and frequentist point of views\n",
        "\n",
        "Before we start, let's clarify the difference between two important concepts in statistics: **confidence intervals** and **credible intervals**.\n",
        "\n",
        "If $[A, B]$ is an interval generated by a model, and $\\theta$ is the parameter of interest, which of the following is bayesian and which is frequentist statement?\n",
        "\n",
        "> **A. There is a 95% probability that the true quantity $\\theta$ lies in $[A, B]$**\n",
        "> \n",
        "> **B. There is 95% chance that $[A, B]$ contains the true quantity $\\theta$**\n",
        "\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Answer\n",
        "The first is a Bayesian, the second is a frequentist statement.\n",
        "\n",
        "The frequentist interval tells us that, if we repeat the experiment say 100 times, 95 of the constructed intervals will contain the true parameter value. The Bayesian interval tells us that, given the data we have, there is a 95% chance that the true parameter value lies in that interval. The key difference is that the bayesian credible interval conditions on the data, while the frequentist confidence interval takes into account the randomness of the data generation process on the measurements.\n",
        " \n",
        ":::\n",
        "\n",
        "One of the most intuitive explanations of the difference between both perspectives is the one presented by [Jake VanderPlas in his talk in 2014](\n",
        "    https://www.youtube.com/watch?v=KhAUfqhLakw\n",
        ").\n",
        "\n",
        "Consider this simple analogy: imagine you are trying to estimate the height of a tree. The Frequentist approach would be to take a sample of trees, measure their heights, and then calculate a confidence interval based on that sample. The Bayesian approach, on the other hand, would involve taking into account your prior knowledge about the height of trees in general, and then updating that knowledge based on the sample you took. The intervals of the frequentist method would tell that this measurement procedure has 95% chance to contain the true average height of the trees, while the bayesian method would tell that, given the data we have, there is a 95% chance that the true average height of the trees lies in the interval.\n"
      ],
      "id": "22c9f0d3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: intervals\n",
        "#| fig-cap: Bayesian vs Frequentist intervals, as in [Jake VanderPlas talk in 2014](https://www.youtube.com/watch?v=KhAUfqhLakw)\n",
        "#| echo: false\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "\n",
        "# Generate synthetic data\n",
        "bayesian_params = np.random.normal(loc=0, scale=1, size=(100, 2))\n",
        "frequentist_center = np.array([0, -5])\n",
        "frequentist_intervals = [\n",
        "    frequentist_center + np.random.normal(scale=2, size=2) for _ in range(20)\n",
        "]\n",
        "\n",
        "# Create side-by-side plots with white background\n",
        "fig, (ax_bayes, ax_freq) = plt.subplots(1, 2, figsize=(12, 6))\n",
        "fig.patch.set_facecolor(\"white\")\n",
        "\n",
        "# --- Bayesian Credible Region ---\n",
        "ax_bayes.set_facecolor(\"white\")\n",
        "ax_bayes.scatter(\n",
        "    bayesian_params[:, 0], bayesian_params[:, 1], color=\"orange\", label=\"Parameter\"\n",
        ")\n",
        "bayesian_ellipse = plt.Circle(\n",
        "    (0, 0), 2.5, color=\"steelblue\", alpha=0.5, label=\"Interval\"\n",
        ")\n",
        "ax_bayes.add_patch(bayesian_ellipse)\n",
        "\n",
        "ax_bayes.set_title(\"Bayesian Credible Region\", color=\"black\", fontsize=14)\n",
        "ax_bayes.legend(loc=\"upper right\", fontsize=10)\n",
        "ax_bayes.set_xlim(-6, 6)\n",
        "ax_bayes.set_ylim(-6, 6)\n",
        "ax_bayes.axis(\"off\")\n",
        "\n",
        "# --- Frequentist Confidence Interval ---\n",
        "ax_freq.set_facecolor(\"white\")\n",
        "for center in frequentist_intervals:\n",
        "    ellipse = plt.Circle(center, 2.5, color=\"steelblue\", alpha=0.3)\n",
        "    ax_freq.add_patch(ellipse)\n",
        "ax_freq.scatter(\n",
        "    [frequentist_center[0]], [frequentist_center[1]], color=\"orange\", label=\"Parameter\"\n",
        ")\n",
        "\n",
        "ax_freq.set_title(\"Frequentist Confidence Interval\", color=\"black\", fontsize=14)\n",
        "ax_freq.legend(loc=\"upper right\", fontsize=10)\n",
        "ax_freq.set_xlim(-6, 6)\n",
        "ax_freq.set_ylim(-10, 2)\n",
        "ax_freq.axis(\"off\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "intervals",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This subtle difference leads to difference answers, in some cases, and for a given question we should be careful to choose the right approach. Here are some questions that a credible interval may answer better:\n",
        "\n",
        "| # | Bayesian | Frequentist |\n",
        "|---|----------|-------------|\n",
        "| 1 | “Given only three months of sales data for a brand-new SKU, how likely is it to exceed 1000 units next quarter?” | \"Based on three months of data, how confident are we that we will sell more than 1000 units next quarter?\" \n",
        "\n",
        "The frequentist communicates the confidence on the experimental procedure / model ability to cover the true value in the confidence interval. The bayesian focus on the distribution of the parameter itself.\n",
        "\n",
        "## Basics of Bayesian Inference\n",
        "\n",
        "In Bayesian Inference, we are\n",
        "interested in finding out the distribution $P(\\theta|X)$ of our parameters $\\theta$,\n",
        "given our data $X$. We consider that the parameters are random variables, because we always have some amount of uncertainty on their true values. \n",
        "\n",
        "Bayesian inference derives from the simple Bayes' rule:\n",
        "\n",
        "$$\n",
        "\\underbrace{P(\\theta|X)}_{\\text{Posterior}} = \\frac{P(X|\\theta)P(\\theta)}{P(X)}\n",
        "$$\n",
        "\n",
        "That, for all practical purposes, we can ignore the denominator $P(X)$, called evidence, since it is constant and does not depend on our variable of interest $\\theta$. Then, it can be simplified to:\n",
        "\n",
        "$$\n",
        " \\underbrace{P(\\theta|X)}_{\\text{Posterior}} \\propto \\underbrace{P(X|\\theta)}_{\\text{Likelihood}} \\underbrace{P(\\theta)}_{\\text{Prior}}\n",
        "$$ {#eq-bayes-propto}\n",
        "\n",
        "This \"$\\propto$\" symbol indicates \"proportional to\", and proportionality is simpler and enough to find the posterior. We don't need to know the exact probability of $P(\\theta|X)$ to estimate such distribution, as we will see, we need just to be able to answer how much a given parameter value is probable in comparison to other values. The denominator $P(X)$ serves as a normalization term, to guarantee that the posterior integrates to one,\n",
        "and since it is independent of $\\theta$ - the quantity we are interested in - we can just ignore it.\n",
        "\n",
        "So, we can interpret each term as:\n",
        "\n",
        "* Likelihood $P(X|\\theta)$: probability of observing the data given parameters. The model of how the world produces data from parameters.\n",
        "* Prior distribution $P(\\theta)$: probability of seeing a set of parameters, not conditioned on the data. This represent our prior beliefs.\n",
        "* Posterior distribution $P(\\theta|X)$: probability of the parameters, given the data. \n",
        "\n",
        "\n",
        "This rule **connects** any prior belief one has about a random variable $\\theta$ to what their distribution must be according to the data. Where either the prior or the likelihood is zero, the posterior probability is also zero. So the prior can also work to restrict the domain of our parameters.\n",
        "\n",
        "Consider a simple example of having a box with a certain proportion $\\theta$ of red balls. We observe a dataset $X = (K,N)$, informing the number of red balls $K$ we draw after a total trials $N$.\n",
        "\n",
        "![A box with red and blue balls, where the proportion of red balls is $\\theta$](box.png){fig-align=\"center\" width=\"30%\"}\n",
        "\n",
        "* The prior distribution should reflect our initial guesses of what the share of red balls should be.\n",
        "The probability of landing heads should lie between 0 and 1 ($\\theta \\in (0, 1)$), and a natural\n",
        "choice of prior here is the [Beta distribution](https://en.wikipedia.org/wiki/Beta_distribution), that has its domain in this interval.\n",
        "  \n",
        "* The likelihood is the mathematical rule that tells us how the world produces what we see. **It’s a function of parameters, mapping them to the distribution of observations**. For sequence of draws, a natural rule to describe the number\n",
        "of red balls and total draws is binomial distribution:\n",
        "\n",
        "$$\n",
        "X|\\theta \\sim \\text{Binomial}(n, k) = \\binom{n}{k} \\,p^k (1-p)^{\\,n-k}\n",
        "$$\n",
        "\n",
        "* The posterior will be our final belief on the values of $\\theta$. It will reflect both the prior belief and the likelihood of the data.\n",
        "\n",
        "\n",
        "For some situations, we can analitically compute the posterior distribution, by replacing the likelihood and prior in Bayes' rule equation. This coin-toss example is one of them, so we can easily build an interactive tools to visualize it.\n",
        "\n",
        "\n",
        "::: {.callout-tip}\n",
        "\n",
        "The interactive view below let's you play with the prior and posterior distributions of a coin toss experiment. \n",
        "\n",
        "Note how, for $Beta(1,1)$, the prior is uniform. This means that we have no prior knowledge about the coin bias (we call this uninformative prior), and only the likelihood term will influence the posterior. \n",
        ":::\n",
        "\n",
        "\n",
        "```{ojs}\n",
        "//| echo: false\n",
        "// Cell 1: Load jStat via dynamic import\n",
        "jStat = require(\"jStat@latest\")\n",
        "\n",
        "// Cell 2: Interactive parameter ranges (Inputs is preloaded)\n",
        "viewof alpha = Inputs.range([1, 20], {step: 1, value: 1, label: \"Prior parameter Alpha (α)\"});\n",
        "viewof beta  = Inputs.range([1, 20], {step: 1, value: 1, label: \"Prior parameter Beta (β)\"});\n",
        "viewof n     = Inputs.range([1, 200], {step: 1, value: 100, label: \"Trials (n)\"});\n",
        "viewof k     = Inputs.range([0, n],    {step: 1, value: 60, label: \"Red balls (k)\"});\n",
        "\n",
        "// Cell 3: Compute θ grid and densities (Plot is preloaded)\n",
        "thetaValues = Array.from({length: 200}, (_, i) => i / 199);\n",
        "\n",
        "priorDist = thetaValues.map(t => ({\n",
        "  theta: t,\n",
        "  density: jStat.beta.pdf(t, alpha, beta),\n",
        "  type: \"Prior\"\n",
        "}));\n",
        "\n",
        "posteriorDist = thetaValues.map(t => ({\n",
        "  theta: t,\n",
        "  density: jStat.beta.pdf(t, alpha + k, beta + (n - k)),\n",
        "  type: \"Posterior\"\n",
        "}));\n",
        "\n",
        "// Cell 4: Plot prior and posterior\n",
        "Plot.plot({\n",
        "  width: 600,\n",
        "  height: 400,\n",
        "  x: {label: \"θ\"},\n",
        "  y: {label: \"Density\"},\n",
        "  color: {legend: true},\n",
        "  marks: [\n",
        "    Plot.line(priorDist,    {x: \"theta\", y: \"density\", stroke: \"type\", strokeWidth: 2}),\n",
        "    Plot.line(posteriorDist,{x: \"theta\", y: \"density\", stroke: \"type\", strokeWidth: 2})\n",
        "  ]\n",
        "});\n",
        "```\n",
        "\n",
        "\n",
        "### Approximating posterior from data\n",
        "\n",
        "In other situations (most of them), developing the equations does not lead to an analytical solution.\n",
        "In such cases, we can use alternative methods to approximate the posterior distribution.\n",
        "\n",
        "There is a spectrum of methods to approximate the posterior distribution, from point estimates to sampling methods. Here are some of the most common ones, from \"most bayesian\" to \"least bayesian\":\n",
        "\n",
        "\n",
        "1. **Markov Chain Monte Carlo (MCMC)**: by using the unnormalized posterior in equation @eq-bayes-propto, we can sample many instances of $\\{\\theta_i\\}_{i=1}^K$ with probabilities proportional to their true posterior probabilities. The result of the estimation is a set of samples that simulate samples from the true posterior, and can be used to compute the mean, percentile or any quantity of interest.\n",
        "\n",
        "2. **Variational Inference (VI)**: since the true posterior distribution may be hard to compute, we can use another simpler candidate distribution, and seek the parameters of this approximate distribution that minimize the distance to the true posterior. This is often done by minimizing the Kullback-Leibler divergence between the true posterior and the approximate distribution. The result are parameters of the candidate distribution, that can be used to sample sets of parameters and compute the mean, percentiles or any quantity of interest. This is often faster than MCMC, but may not capture the true posterior distribution as well as MCMC intends to.\n",
        "\n",
        "3. **Maximum A Posteriori (MAP)**: this is a point estimate of the posterior distribution, which finds the mode (maximum) of the posterior distribution. It is often faster and easier to compute than the full posterior distribution.\n",
        "\n",
        "\n",
        "\n",
        "#### Markov Chain Monte Carlo (MCMC)\n",
        "\n",
        "Estimating the full posterior distribution, and not single point, turns out to be extremely useful when we want to measure risks and other quantities. This is where MCMC comes in. MCMC is based on two key ideas: Markov Chains and Monte Carlo methods. \n",
        "\n",
        "Markov chains are random sequences of states $\\{S_i\\}$, with a given transition probability  $T(S_{i+1}|S_i)$ between them. These transitions have the mandatory property of not depending on the history of the chain, and only on the current observation. They are memory-less.\n",
        "\n",
        "These random sequences can have an interesting property of **stationary distributions**. In other words, these sequences can have as an equilibrium a certain distribution $p$, so that, if the sequence starts at $p$, future values are also drawn according to the probability $p$. What if we could build a Markov chain that has as stationary distribution the posterior distribution we are interested in? This is the key idea of MCMC.\n",
        "\n",
        "The MCMC basically designs a Markov Chain that have as stationary distribution the distribution of interest: our posterior $P(\\theta|X)$.\n",
        "The name Monte Carlo comes from the famous casinos in Monaco, and its basic idea is that by using random samples we can approximate some quantity of interest.\n",
        "\n",
        "Consider the example below, where we sample many times from a beta distribution. With more and more samples randomly draw from it, our approximation quality increases, and the histogram starts to look more like the true distribution.\n"
      ],
      "id": "ccf8f27c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | echo: False\n",
        "\n",
        "from IPython.display import HTML\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.animation import FuncAnimation\n",
        "from scipy.stats import beta as beta_dist  # only for drawing the reference PDF\n",
        "\n",
        "# -------------------------------------------------\n",
        "# 1. Draw “MCMC” samples\n",
        "# -------------------------------------------------\n",
        "np.random.seed(42)\n",
        "n_samples = 100  # total samples to show\n",
        "samples = np.random.beta(2, 5, n_samples)\n",
        "\n",
        "# Fixed histogram binning\n",
        "bins = np.linspace(0, 1, 31)  # 30 equal-width bins\n",
        "bin_width = bins[1] - bins[0]\n",
        "\n",
        "# Reference Beta(2,5) PDF for comparison\n",
        "x_pdf = np.linspace(0, 1, 500)\n",
        "pdf_true = beta_dist.pdf(x_pdf, 2, 5)\n",
        "\n",
        "# -------------------------------------------------\n",
        "# 2. Set up the figure & artists\n",
        "# -------------------------------------------------\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "# Empty placeholders; artists are updated in `update`\n",
        "bars = ax.bar(\n",
        "    bins[:-1],\n",
        "    np.zeros(len(bins) - 1),\n",
        "    width=bin_width,\n",
        "    align=\"edge\",\n",
        "    alpha=0.6,\n",
        "    label=\"Empirical histogram\",\n",
        ")\n",
        "(line_pdf,) = ax.plot([], [], \"k--\", lw=2, label=\"True Beta(2,5) PDF\")\n",
        "(point,) = ax.plot([], [], \"ro\", label=\"Current sample\")\n",
        "\n",
        "\n",
        "def init():\n",
        "    \"\"\"Initialize empty frame.\"\"\"\n",
        "    ax.set_xlim(0, 1)\n",
        "    ax.set_ylim(0, 8)\n",
        "    ax.set_xlabel(\"θ\")\n",
        "    ax.set_ylabel(\"Density\")\n",
        "    ax.set_title(\"Building a posterior via samples\")\n",
        "    ax.legend(loc=\"upper right\")\n",
        "    # Pre-draw the true PDF once (static)\n",
        "    line_pdf.set_data(x_pdf, pdf_true)\n",
        "    return (*bars, line_pdf, point)\n",
        "\n",
        "\n",
        "# -------------------------------------------------\n",
        "# 3. Animation callback\n",
        "# -------------------------------------------------\n",
        "def update(frame):\n",
        "    \"\"\"\n",
        "    At every frame `frame`, use the first `frame + 1` samples\n",
        "    to update the histogram and mark the latest draw.\n",
        "    \"\"\"\n",
        "    current = samples[: frame + 1]\n",
        "\n",
        "    # Update histogram heights\n",
        "    counts, _ = np.histogram(current, bins=bins, density=True)\n",
        "    for rect, h in zip(bars, counts):\n",
        "        rect.set_height(h)\n",
        "\n",
        "    # Move the red point to the newest sample\n",
        "    point.set_data([samples[frame]], [0])  # at density 0 for visibility\n",
        "\n",
        "    ax.set_title(f\"Samples shown: {frame + 1} / {n_samples}\")\n",
        "    return (*bars, point)\n",
        "\n",
        "\n",
        "# -------------------------------------------------\n",
        "# 4. Create & display the animation\n",
        "# -------------------------------------------------\n",
        "ani = FuncAnimation(\n",
        "    fig,\n",
        "    update,\n",
        "    frames=n_samples,\n",
        "    init_func=init,\n",
        "    interval=10,  # milliseconds between frames\n",
        "    blit=True,\n",
        "    repeat=False,\n",
        ")\n",
        "plt.close()  # avoid duplicate static\n",
        "\n",
        "HTML(ani.to_jshtml())"
      ],
      "id": "3d03cfb1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "In a nutshell, Monte Carlo methods leverage the randomness to approximate functions of a random distribution.\n",
        "\n",
        "Breaking down the name, Monte Carlo is similar to trial and error methods, seasoned with randomness; Markov Chain means we are\n",
        "interested in sequences of random variables, where the next variable in the sequence depends only on the current one, not on the previous ones. Basically, if we could reduce MCMC explanation to few words, we could say that MCMC tries to take a lot of samples from $P(\\theta|X)$, based on trial and error, and the accepted samples will be the posterior distribution. MCMC comes in different flavours: Metropolis-Hastings, Gibbs sampling, Hamiltonian Monte Carlo, etc. The key idea is that we can generate samples from the posterior distribution by constructing a Markov chain that has the desired distribution as its equilibrium distribution.\n",
        "\n",
        "##### Metropolis Hasting algorithm\n"
      ],
      "id": "8fac177e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | echo: false\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.animation import FuncAnimation\n",
        "from IPython.display import HTML, display\n",
        "\n",
        "\n",
        "# ------------------------------------------------------------------\n",
        "# Helper distributions and MH kernel\n",
        "# ------------------------------------------------------------------\n",
        "class Distribution:\n",
        "    def log_prob(self, value):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def sample(self, size=1):\n",
        "        raise NotImplementedError\n",
        "\n",
        "\n",
        "class Uniform(Distribution):\n",
        "    def __init__(self, lower, upper):\n",
        "        self.lower, self.upper = lower, upper\n",
        "\n",
        "    def log_prob(self, value):\n",
        "        value = np.asarray(value)\n",
        "        probs = ((value >= self.lower) & (value <= self.upper)).astype(float) / (\n",
        "            self.upper - self.lower\n",
        "        )\n",
        "        return np.sum(np.log(probs, where=probs > 0, out=np.full_like(probs, -np.inf)))\n",
        "\n",
        "    def sample(self, size=1):\n",
        "        return np.random.uniform(self.lower, self.upper, size=size)\n",
        "\n",
        "\n",
        "class Bernoulli(Distribution):\n",
        "    def __init__(self, p):\n",
        "        self.p = p\n",
        "\n",
        "    def log_prob(self, value):\n",
        "        value = np.asarray(value)\n",
        "        return np.sum(value * np.log(self.p) + (1 - value) * np.log(1 - self.p))\n",
        "\n",
        "    def sample(self, size=1):\n",
        "        return np.random.binomial(1, self.p, size=size)\n",
        "\n",
        "\n",
        "class MetropolisHasting:\n",
        "    def __init__(self, num_samples, num_warmup, step_size=0.1):\n",
        "        self.num_samples, self.num_warmup, self.step_size = (\n",
        "            num_samples,\n",
        "            num_warmup,\n",
        "            step_size,\n",
        "        )\n",
        "\n",
        "    def _transition(self, x):\n",
        "        return x + np.random.normal(0, self.step_size)\n",
        "\n",
        "    def run(self, data, prior, model_cls, p0=None):\n",
        "        N = self.num_samples + self.num_warmup\n",
        "        samples = np.full(N, np.nan)\n",
        "        accepted = np.zeros(N, dtype=int)\n",
        "        cur = prior.sample()[0] if p0 is None else p0\n",
        "        samples[0] = cur\n",
        "        for i in range(1, N):\n",
        "            cand = self._transition(cur)\n",
        "            logp_cur = prior.log_prob(cur) + model_cls(cur).log_prob(data)\n",
        "            logp_cand = prior.log_prob(cand) + model_cls(cand).log_prob(data)\n",
        "            if np.log(np.random.uniform()) <= logp_cand - logp_cur:\n",
        "                cur = cand\n",
        "                if i >= self.num_warmup:\n",
        "                    accepted[i] = 1\n",
        "            samples[i] = cur\n",
        "        return samples, accepted\n",
        "\n",
        "\n",
        "# ------------------------------------------------------------------\n",
        "# Run the sampler\n",
        "# ------------------------------------------------------------------\n",
        "np.random.seed(42)\n",
        "data = np.random.binomial(1, 0.2, size=50)\n",
        "mh = MetropolisHasting(num_samples=250, num_warmup=25, step_size=0.1)\n",
        "samples, accept = mh.run(data, prior=Uniform(0, 1), model_cls=Bernoulli, p0=0.6)\n",
        "\n",
        "# ------------------------------------------------------------------\n",
        "# Colors for accepted/rejected\n",
        "# ------------------------------------------------------------------\n",
        "col_rej = \"red\"\n",
        "col_acc = \"blue\"\n",
        "\n",
        "# ------------------------------------------------------------------\n",
        "# One figure, two axes, shared y‐axis\n",
        "# ------------------------------------------------------------------\n",
        "fig, (ax_trace, ax_hist) = plt.subplots(ncols=2, sharey=True, figsize=(12, 5))\n",
        "\n",
        "# Trace axis\n",
        "ax_trace.set_xlim(0, len(samples))\n",
        "ax_trace.set_ylim(0, 1)\n",
        "ax_trace.set_xlabel(\"Iteration\")\n",
        "ax_trace.set_ylabel(\"Sample value\")\n",
        "ax_trace.set_title(\"Trace (accepted vs rejected)\")\n",
        "sc_rej = ax_trace.plot(\n",
        "    [], [], marker=\"x\", linestyle=\"none\", color=col_rej, alpha=0.4, label=\"Rejected\"\n",
        ")[0]\n",
        "sc_acc = ax_trace.plot(\n",
        "    [], [], marker=\"o\", linestyle=\"none\", color=col_acc, alpha=0.6, label=\"Accepted\"\n",
        ")[0]\n",
        "ax_trace.axhline(\n",
        "    0.2, linestyle=\"--\", linewidth=1, color=\"black\", alpha=0.7, label=\"Ground-truth p\"\n",
        ")\n",
        "ax_trace.legend()\n",
        "\n",
        "# Histogram axis\n",
        "ax_hist.set_xlabel(\"Frequency\")\n",
        "ax_hist.set_title(\"Histogram up to current step\")\n",
        "ax_hist.set_xlim(0, None)  # autoscale x‐axis\n",
        "# y‐limits inherited from sharey\n",
        "\n",
        "\n",
        "# ------------------------------------------------------------------\n",
        "# Animation setup (faster: interval=20ms)\n",
        "# ------------------------------------------------------------------\n",
        "def init():\n",
        "    sc_rej.set_data([], [])\n",
        "    sc_acc.set_data([], [])\n",
        "    ax_hist.cla()\n",
        "    ax_hist.set_xlabel(\"Frequency\")\n",
        "    ax_hist.set_title(\"Histogram up to current step\")\n",
        "    return sc_rej, sc_acc\n",
        "\n",
        "\n",
        "def update(frame):\n",
        "    xs = np.arange(frame + 1)\n",
        "    ys = samples[: frame + 1]\n",
        "    mask = accept[: frame + 1].astype(bool)\n",
        "\n",
        "    # trace update\n",
        "    sc_acc.set_data(xs[mask], ys[mask])\n",
        "    sc_rej.set_data(xs[~mask], ys[~mask])\n",
        "\n",
        "    # histogram update\n",
        "    ax_hist.cla()\n",
        "    ax_hist.set_xlabel(\"Frequency\")\n",
        "    ax_hist.set_ylim(0, 1)\n",
        "    ax_hist.set_title(\"Histogram up to current step\")\n",
        "    ax_hist.hist(\n",
        "        ys[mask],\n",
        "        bins=10,\n",
        "        orientation=\"horizontal\",\n",
        "        alpha=0.6,\n",
        "        density=True,\n",
        "        color=col_acc,\n",
        "        label=\"Accepted\",\n",
        "    )\n",
        "\n",
        "    ax_hist.legend(loc=\"upper right\")\n",
        "\n",
        "    return sc_rej, sc_acc, *ax_hist.patches\n",
        "\n",
        "\n",
        "anim = FuncAnimation(\n",
        "    fig, update, init_func=init, frames=len(samples), interval=5, blit=False\n",
        ")\n",
        "\n",
        "# Display inline\n",
        "# display(HTML(anim.to_jshtml()))\n",
        "\n",
        "\n",
        "# Optional: save as GIF\n",
        "anim.save(\"mh_accepted_rejected_fast.gif\", writer=\"pillow\", fps=30)\n",
        "plt.close()"
      ],
      "id": "ed3c9a53",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Metropolis Hasting](mh_accepted_rejected_fast.gif)\n",
        "\n",
        "## Variational Inference\n"
      ],
      "id": "8f26aebf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | echo: False\n",
        "\n",
        "# Warning, this is not a true VI!\n",
        "from IPython.display import HTML\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.animation import FuncAnimation\n",
        "from scipy.stats import beta as beta_dist\n",
        "\n",
        "# --------------------------------------------------\n",
        "# 1.  True posterior:  p(θ | y) = Beta(2, 5)\n",
        "# --------------------------------------------------\n",
        "alpha_true, beta_true = 2.0, 5.0\n",
        "theta = np.linspace(0, 1, 400)\n",
        "posterior = beta_dist.pdf(theta, alpha_true, beta_true)\n",
        "posterior /= posterior.max()  # scale peak to 1 for tidy overlay\n",
        "\n",
        "# --------------------------------------------------\n",
        "# 2.  Variational family:  q(θ) = Beta(α, β)  (start broad & flat)\n",
        "# --------------------------------------------------\n",
        "alpha_q, beta_q = 0.5, 0.5  # initial guess\n",
        "lr = 0.10  # learning-rate-ish factor\n",
        "n_iter = 60  # animation frames\n",
        "\n",
        "# --------------------------------------------------\n",
        "# 3.  Matplotlib figure and empty artists\n",
        "# --------------------------------------------------\n",
        "fig, ax = plt.subplots()\n",
        "(line_post,) = ax.plot(theta, posterior, lw=2, label=\"True Beta(2, 5)\")\n",
        "(line_q,) = ax.plot([], [], lw=2, label=\"Variational q(θ)\")\n",
        "(point,) = ax.plot([], [], \"ro\", label=\"q mean\")\n",
        "\n",
        "\n",
        "def init():\n",
        "    ax.set_xlim(0, 1)\n",
        "    ax.set_ylim(0, 1.05)\n",
        "    ax.set_xlabel(r\"$\\theta$\")\n",
        "    ax.set_ylabel(\"Density (scaled)\")\n",
        "    ax.set_title(\"Variational inference: q(θ)=Beta(α,β) → Beta(2,5)\")\n",
        "    ax.legend()\n",
        "    return line_post, line_q, point\n",
        "\n",
        "\n",
        "# --------------------------------------------------\n",
        "# 4.  Update rule (simple exponential approach)\n",
        "# --------------------------------------------------\n",
        "def update(frame):\n",
        "    global alpha_q, beta_q\n",
        "\n",
        "    # toy “natural-gradient” step: move a fraction toward the target α*, β*\n",
        "    alpha_q += lr * (alpha_true - alpha_q)\n",
        "    beta_q += lr * (beta_true - beta_q)\n",
        "\n",
        "    # recompute q density\n",
        "    q_density = beta_dist.pdf(theta, alpha_q, beta_q)\n",
        "    q_density /= q_density.max()  # scale for overlay\n",
        "    line_q.set_data(theta, q_density)\n",
        "\n",
        "    # mark the variational mean\n",
        "    mean_q = alpha_q / (alpha_q + beta_q)\n",
        "    point.set_data([mean_q], [0])  # at baseline for clarity\n",
        "\n",
        "    ax.set_title(f\"Iter {frame+1}/{n_iter}   α={alpha_q:.2f}, β={beta_q:.2f}\")\n",
        "    return line_q, point\n",
        "\n",
        "\n",
        "ani = FuncAnimation(\n",
        "    fig,\n",
        "    update,\n",
        "    frames=n_iter,\n",
        "    init_func=init,\n",
        "    interval=100,  # ms between frames\n",
        "    blit=True,\n",
        "    repeat=False,\n",
        ")\n",
        "plt.close()  # prevent duplicate static plot\n",
        "HTML(ani.to_jshtml())"
      ],
      "id": "3c8b6b99",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Metropolis-Hastings (MH) algorithm\n",
        "\n",
        "It is easy to build the MH algorithm from scratch, and useful to understand the basics of MCMC. Let's separate the initialization and the sampling steps:\n",
        "\n",
        "\n",
        "#### Maximum A Posteriori (MAP)\n",
        "\n",
        "The Maximum A Posteriori (MAP) estimate is the mode of the posterior distribution: the value of $\\theta$ that maximizes the posterior probability density function. Because it does not compute the entire distribution over $\\theta$, and just the most probable value according to the posterior, it is often faster and easier to compute than the full posterior distribution.\n"
      ],
      "id": "de5ec62a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | echo: False\n",
        "from IPython.display import HTML\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.animation import FuncAnimation\n",
        "\n",
        "# Define θ range\n",
        "theta = np.linspace(-5, 5, 500)\n",
        "prior = np.exp(-0.5 * (theta) ** 2)  # Standard normal prior\n",
        "likelihood = np.exp(-0.5 * (theta - 2) ** 2 / 0.5**2)  # Likelihood centered at θ=2\n",
        "\n",
        "posterior = prior * likelihood  # Unnormalized posterior\n",
        "\n",
        "# Normalize for visualization\n",
        "prior /= np.max(prior)\n",
        "likelihood /= np.max(likelihood)\n",
        "posterior /= np.max(posterior)\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "(line_prior,) = ax.plot([], [], label=\"Prior\")\n",
        "(line_likelihood,) = ax.plot([], [], label=\"Likelihood\")\n",
        "(line_posterior,) = ax.plot([], [], label=\"Posterior (unnormalized)\")\n",
        "(point,) = ax.plot([], [], \"ro\", label=\"MAP estimate\")\n",
        "\n",
        "\n",
        "def init():\n",
        "    ax.set_xlim(-5, 5)\n",
        "    ax.set_ylim(0, 1.2)\n",
        "    ax.legend()\n",
        "    return line_prior, line_likelihood, line_posterior, point\n",
        "\n",
        "\n",
        "def update(frame):\n",
        "    if frame == 0:\n",
        "        line_prior.set_data(theta, prior)\n",
        "        line_likelihood.set_data([], [])\n",
        "        line_posterior.set_data([], [])\n",
        "        point.set_data([], [])\n",
        "    elif frame == 1:\n",
        "        line_likelihood.set_data(theta, likelihood)\n",
        "    elif frame == 2:\n",
        "        line_posterior.set_data(theta, posterior)\n",
        "    elif frame == 3:\n",
        "        map_estimate = theta[np.argmax(posterior)]\n",
        "        map_value = posterior.max()\n",
        "        point.set_data([map_estimate], [map_value])\n",
        "    return line_prior, line_likelihood, line_posterior, point\n",
        "\n",
        "\n",
        "ani = FuncAnimation(fig, update, frames=4, init_func=init, blit=True, repeat=False)\n",
        "\n",
        "plt.close()\n",
        "HTML(ani.to_jshtml())"
      ],
      "id": "f8885679",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Although not a \"true\" bayesian inferece, MAP can provide us point estimates that balance the prior and likelihood. The posterior $P(\\theta|X)$  is treated as a function whose maximum we want to find, and\n",
        "due to amazing libraries such as numpyro, and jax, we\n",
        "can leverage autodiff to compute the gradient of the posterior, and rapidly estimate it.\n"
      ],
      "id": "dddfd7c4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | echo: False\n",
        "# Define the parameter range\n",
        "theta = np.linspace(-5, 5, 500)\n",
        "\n",
        "# Define prior, likelihood, and unnormalized posterior\n",
        "prior = np.exp(-0.5 * theta**2)\n",
        "likelihood = np.exp(-0.5 * (theta - 2) ** 2 / (0.5**2))\n",
        "posterior = prior * likelihood\n",
        "\n",
        "\n",
        "# Compute gradient of the log-posterior analytically\n",
        "def grad_log_post(t):\n",
        "    return -t - (t - 2) / (0.5**2)\n",
        "\n",
        "\n",
        "# Perform gradient ascent to generate trajectory of theta values\n",
        "lr = 0.06\n",
        "num_steps = 30\n",
        "thetas = [-4.0]\n",
        "for _ in range(num_steps - 1):\n",
        "    t = thetas[-1]\n",
        "    t_new = t + lr * grad_log_post(t)\n",
        "    thetas.append(t_new)\n",
        "\n",
        "# Normalize posterior for plotting\n",
        "posterior_norm = posterior / np.max(posterior)\n",
        "\n",
        "# Set up the figure and axis\n",
        "fig, ax = plt.subplots()\n",
        "ax.set_xlim(-5, 5)\n",
        "ax.set_ylim(0, 1.2)\n",
        "ax.plot(theta, posterior_norm, label=\"Unnormalized Posterior\")\n",
        "(point,) = ax.plot([], [], \"o\", markersize=10)\n",
        "ax.set_xlabel(\"θ\")\n",
        "ax.set_ylabel(\"Density\")\n",
        "ax.legend()\n",
        "\n",
        "\n",
        "# Animation update function\n",
        "def update(i):\n",
        "    point.set_data([thetas[i]], [np.interp(thetas[i], theta, posterior_norm)])\n",
        "    return (point,)\n",
        "\n",
        "\n",
        "# Create animation\n",
        "ani = FuncAnimation(fig, update, frames=len(thetas), blit=True)\n",
        "plt.close()\n",
        "HTML(ani.to_jshtml())"
      ],
      "id": "5bd6bc39",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The **Maximum Likelihood Estimate (MLE)** would be a frequentist approach similar to MAP, but, in this case, we completely ignore the prior, and optimize the likelihood function. In this sense, you can think of\n",
        "MAP as a regularized version of MLE, where the prior acts as a regularization term.\n",
        "\n",
        "\n",
        "::: {.callout-tip}\n",
        "\n",
        "## Don't be afraid of priors! You may be already using them :)\n",
        "\n",
        "In many cases, **the MAP estimate is equivalent to the MLE estimate with a regularization term!** For example, the famous Ridge and Lasso regressions, that penalize coefficients far from zero, can be seen as MAP estimates with Gaussian and Laplace priors centered on zero, respectively. As the parameter value increases in magnitude, the prior reduces the posterior probability, effectively penalizing large coefficients. This implies that another way to see such regression methods in application of your prior beliefs about the parameters being close to zero.\n",
        "\n",
        ":::\n",
        "\n",
        "## Why?\n",
        "\n",
        "Bayesian inference is not a familiar topic for many data scientist practitioners,\n",
        "but provides a rich set of toolkits for data scientists and businesses that know it. \n",
        "Two reasons make it attractive:\n",
        "\n",
        "* In the lack of large datasets, good and informative **regularization** is key to avoid obtaining bad estimates from your model. The *priors* are a natural way\n",
        "of regularizing a model.\n",
        "* MCMC samples provides an elegant solution to accessing the risks of the outputs a model, or any transformations of it (such as cumulative values).\n",
        "\n",
        "If the words \"bayesian\" and \"inference\" make you afraid: do not worry.\n",
        " We will see that, if you already fitted a ridge or lasso regression, you already did\n",
        "something bayesian. We could also create a gradient of \"how\" bayesian \n",
        "\n",
        "\n",
        "\n",
        "## Hierarchical bayesian models\n",
        "\n",
        "*This blog post is based on a talk presented at Galp. This post is not meant to be seen as part of \"bayesian vs frequentist\" rivalry.\n",
        "I aim to point at some examples of problems where bayesian methodologies can better answer the business **questions** and provide extra insights, that similar frequentist methods maybe also could, but not in a natural or easy way as with\n",
        "bayesian logic.*\n",
        "\n",
        "\n",
        "\n",
        "### Reasons to study bayesian inference\n",
        "\n",
        "Given that we now understand the different point of views, I can list another reasons to why to study bayesian inference:\n",
        "\n",
        "1. **Regularization**: Bayesian inference provides a natural way to regularize models through priors, which can help prevent overfitting, especially in cases with limited data. In addition to that, seeing regularization as a prior belief on the parameters can be much more natural and intuitive, often making it easier to communicate with stakeholders about your hypotheses and assumptions.\n",
        "2. **It is a natural way to define probabilistic models**, where we can incorporate uncertainty in our estimates and predictions. In timeseries forecasting, customer lifetime value estimation, and many other applications, we can construct probabilistic models that naturally incorporate uncertainty and provide a distribution of possible outcomes, rather than just point estimates. This is particularly useful in business applications where understanding the range of possible outcomes is crucial for decision-making.\n",
        "   \n",
        "3. **We can easily extend our results and compute any function $g(\\theta)$ of our estimates**: by using samples from the posterior, we can compute any function of the parameters, such as risk measures, quantiles, or any other transformation of the parameters. For example, you may forecast the posterior the number of sales in day, but easily compute the posterior of the cumulative sales in the next 30 days, or the risk of not reaching a certain sales target.\n"
      ],
      "id": "f77c9a7d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/felipeangelim/Workspace/felipeangelimvieira.github.io/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}